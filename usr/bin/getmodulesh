#!/bin/bash

#    modules at any shell modules for bash script language - more than a snake
#    Copyright (C) 2021  lazypwny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>

modulerepo="https://raw.githubusercontent.com/modulesh/modules/main/"
sourcefile="modulesh.list"

moduledir="/usr/local/lib/modulesh"

version="1.0"
owner="lazypwny"

comparesourcelist() {
    [ -d /tmp/modulesh ] && rm -rf /tmp/modulesh
    mkdir /tmp/modulesh
    wget -O  /tmp/modulesh/${sourcefile} "${modulerepo}${sourcefile}" && source /tmp/modulesh/${sourcefile} || { echo "can't source the ${sourcefile}" ; exit 1; } 
    [ -z ${1} ] && { echo "pls type module name to you want to get" ; exit 1;} 
    [[ $(cat /tmp/modulesh/${sourcefile} | tr "=" " " | grep ${1} | awk 'NR==1{print $1}') = "${1}"  ]] && echo "good repo is exist.." || { echo "repo isn't exist pls check to module name.." ; exit 1 ;}
    modulepack="$(cat /tmp/modulesh/${sourcefile} | tr '="' " " | grep ${1} | awk 'NR==1{print $NF}')"
    modulepackname="$(echo "$modulepack" | tr "/" " " | awk '{print $NF}')"
}

getmodule() {
    [ -d /tmp/modulesh ] && rm -rf /tmp/modulesh
        mkdir /tmp/modulesh && mkdir /tmp/modulesh/module
        wget -O "/tmp/modulesh/module/${modulepackname}" "${modulepack}" || { echo "module file doesn't exist.."; exit 1;}
        mkdir /tmp/modulesh/install
        tar -xvf "/tmp/modulesh/module/${modulepackname}" -C "/tmp/modulesh/install"
    if [ -e /tmp/modulesh/install/${1}/install.sh ] ; then
        bash /tmp/modulesh/install/${1}/install.sh
    else
        mv /tmp/modulesh/install/${1}/*.sh ${moduledir} && echo "module(s) copied succesfully.." || echo "module(s) cannot copied.."
        mv /tmp/modulesh/install/${1}/*.info /usr/share/modulesh/info && echo "manual(s) copied succesfully.." || echo "manual(s) cannot copied.."
    fi
}

makemodule() {
    ## get name
    name="$(echo "${1}" | tr "/" " " | awk 'NR==1{print $NF}')"
    ## create tar.gz
    tar -czvf ${name}.tar.gz ${1} && echo "module ${name} saved as ${1}${name}.tar.gz"
}

case ${1} in
    [hH][eE][lL][pP]|--[hH][eE][lL][pP]|-[hH])
        printf "Do not forget to read the makemodule.md file to create new modules.\n\nWith the --install argument, you can install any additional module you want. After the argument, it is enough to enter the package\n\tname as a parameter, if there is such a package in the repository it will download and install it for you.\n\nThe --uninstall argument will delete the module you have given as a parameter.\n\nThe --version argument shows the current version and producer of getmodulesh\n\nThe --help argument is used to show this menu\n"
    ;;
    [mM][aA][kK][eE][mM][oO][dD][uU][lL][eE]|--[mM][aA][kK][eE][mM][oO][dD][uU][lL][eE]|-[mM][mM])
        if [[ ${2} = "" ]] ; then
            echo "module dir not found! pls read the document of 'makemodule.md'"
            exit 1
        elif ! [ -d ${2} ] ; then
            echo "module dir ${2} not found! pls read the document of 'makemodule.md'"
            exit 1
        elif [ -d ${2} ] ; then
            [ -e ${2}/*.info ] && echo "manual page exist.." || echo "manual page do not exist! pls prepare manual page for more useful your module.."
            [ -e ${2}/install.sh ] && echo "installer found.." || echo "If your project includes 3rd party software, please add install.sh"
            [ -e ${2}/*.sh ] && echo "module trigger exist.." || echo "module trigger not found. pls read the document of 'makemodule.md'"
            makemodule ${2}
            exit 0
        fi
    ;;
    [iI][nN][sS][tT][aA][lL][lL]|--[iI][nN][sS][tT][aA][lL][lL]|-[iI])
        [[ $(wget -q --spider http://google.com ; echo "$?") = 0 ]] || { echo "check your internet connection.." ; exit 1 ;}
        comparesourcelist ${2}
        getmodule ${2}
    ;;
    [uU][nN][iI][nN][sS][tT][aA][lL][lL]|--[uU][nN][iI][nN][sS][tT][aA][lL][lL]|-[uU])
        [ -z ${2} ] && { echo "pls type to module name you want to remove!" ; exit 1;}
        { [ -e ${moduledir}/${2}.sh ] || [ -e ${moduledir}/${2} ] ; } &&  { rm ${moduledir}/${2}.sh || rm ${moduledir}/${2} ; echo "module ${2}/.sh removed from your modulesh lib."; }
        { [ -e /usr/share/modulesh/info/${2}.info ] || [ -e /usr/share/modulesh/info/${2} ] ; } &&  { rm /usr/share/modulesh/info/${2}.info || rm /usr/share/modulesh/info/${2} ; echo "module ${2}/.info file removed from your manuals page dir."; }  || echo "module ${2} already removed or never existed.." 
    ;;
    [vV][eE][rR][sS][iI][oO][nN]|--[vV][eE][rR][sS][iI][oO][nN]|-[vV])
        echo "${version} ${owner}"
        exit 0
    ;;
    *)
        echo "invalid argument: type '--help' for what can be done" 
    ;;
esac