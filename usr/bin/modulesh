#!/bin/bash

#########################
# a script by lazy-pwny #
#########################

#    modules at any shell modules for bash script language - more than a snake
#    Copyright (C) 2021  lazypwny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>

owner="lazypwny"
version="1.0"

moduledir="/usr/local/lib/modulesh"
manualdir="/usr/share/modulesh/info"

getmodulerepo="https://github.com/modulesh/getmodulesh"

if [[ $(command -v modulesh) = "" ]] ; then
    echo "You need to install this tool before use pls type: 'sudo bash installer.sh --install'"
    exit 1
fi

case ${1} in 
    [hH][eE][lL][pP]|--[hH][eE][lL][pP]|-[hH])
        printf "\nThe getmodulesh is a module caller designed for modules. You can use getmodulesh to load a modulethat is not\n\tin your library from the internet. Type 'getmodulesh --help' to learn more about getmodulesh\n\nThe --list argument lists how many and which modules you have in the current argument directory.\n\nThe --module argument must be used with the parameter. The first parameter to be given after the module\n\targument must be a module name or the name of the manual file. eg: modulesh --module color\n\nThe --version argument shows the current version and producer of modulesh\n\nThe --help argument is used to show this menu\n"
        exit 0
    ;;
    [vV][eE][rR][sS][iI][oO][nN]|--[vV][eE][rR][sS][iI][oO][nN]|-[vV])
        echo -e "${version} ${owner}"
        exit 0
    ;;
    [mM][oO][dD][uU][lL][eE]|--[mM][oO][dD][uU][lL][eE]|-[mM])
        [ -z ${2} ] && { echo "usage: modulesh --module <module-name>" ; exit 1 ;} 
        [ -e ${manualdir}/${2}.info ] && { cat ${manualdir}/${2}.info ; exit 0; } || { [ -e ${manualdir}/${2} ] && cat ${manualdir}/${2} || { echo "file ${2} not exist." ; exit 1 ;} ;} 
        exit 0
    ;;
    [lL][iI][sS][tT]|--[lL][iI][sS][tT]|-[lL][sS])
        [ -d ${moduledir} ] && { echo "in ${moduledir} you have $(ls ${moduledir} | wc -l) modules:" ; echo "" ; ls ${moduledir} ; }
        exit
    ;;
esac

if [ "${#}" -gt 0 ] ; then
    for i in $( seq 1 $# ) ; do
        if [ -e ${moduledir}/${@:i:1}.sh ] ; then
            source ${moduledir}/${@:i:1}.sh
        elif [ -e "${moduledir}/${@:i:1}" ] ; then
            source "${moduledir}/${@:i:1}"
        else
            echo -e "no module found '${@:i:1}', type 'modules-sh -ls' to\nsee available modules and 'modulesh --module <module-name>' to get\ninformation about that module.\n"
        fi
    done
else
    echo "wrong use. If you want to know how to use it, try 'modulesh --help'"
fi